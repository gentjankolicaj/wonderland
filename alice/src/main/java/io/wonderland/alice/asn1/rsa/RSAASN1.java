/*
 * This class file was automatically generated by ASN1bean v (http://www.beanit.com)
 */

package io.wonderland.alice.asn1.rsa;

import com.beanit.asn1bean.ber.BerLength;
import com.beanit.asn1bean.ber.BerTag;
import com.beanit.asn1bean.ber.ReverseByteArrayOutputStream;
import com.beanit.asn1bean.ber.types.BerType;
import io.wonderland.alice.asn1.algorithm.Algorithm;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Serializable;

public class RSAASN1 implements BerType, Serializable {

  private static final long serialVersionUID = 1L;

  public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

  private byte[] code = null;
  private Algorithm algorithm = null;
  private RSAPublicKeyASN1 publicKey = null;
  private RSAPrivateKeyASN1 privateKey = null;

  public RSAASN1() {
  }

  public RSAASN1(byte[] code) {
    this.code = code;
  }

  public void setAlgorithm(Algorithm algorithm) {
    this.algorithm = algorithm;
  }

  public Algorithm getAlgorithm() {
    return algorithm;
  }

  public void setPublicKey(RSAPublicKeyASN1 publicKey) {
    this.publicKey = publicKey;
  }

  public RSAPublicKeyASN1 getPublicKey() {
    return publicKey;
  }

  public void setPrivateKey(RSAPrivateKeyASN1 privateKey) {
    this.privateKey = privateKey;
  }

  public RSAPrivateKeyASN1 getPrivateKey() {
    return privateKey;
  }

  @Override
  public int encode(OutputStream reverseOS) throws IOException {
    return encode(reverseOS, true);
  }

  public int encode(OutputStream reverseOS, boolean withTag) throws IOException {

    if (code != null) {
      reverseOS.write(code);
      if (withTag) {
        return tag.encode(reverseOS) + code.length;
      }
      return code.length;
    }

    int codeLength = 0;
    codeLength += privateKey.encode(reverseOS, true);

    codeLength += publicKey.encode(reverseOS, true);

    codeLength += algorithm.encode(reverseOS, true);

    codeLength += BerLength.encodeLength(reverseOS, codeLength);

    if (withTag) {
      codeLength += tag.encode(reverseOS);
    }

    return codeLength;

  }

  @Override
  public int decode(InputStream is) throws IOException {
    return decode(is, true);
  }

  public int decode(InputStream is, boolean withTag) throws IOException {
    int tlByteCount = 0;
    int vByteCount = 0;
    BerTag berTag = new BerTag();

    if (withTag) {
      tlByteCount += tag.decodeAndCheck(is);
    }

    BerLength length = new BerLength();
    tlByteCount += length.decode(is);
    int lengthVal = length.val;
    vByteCount += berTag.decode(is);

    if (berTag.equals(Algorithm.tag)) {
      algorithm = new Algorithm();
      vByteCount += algorithm.decode(is, false);
      vByteCount += berTag.decode(is);
    } else {
      throw new IOException("Tag does not match mandatory sequence component.");
    }

    if (berTag.equals(RSAPublicKeyASN1.tag)) {
      publicKey = new RSAPublicKeyASN1();
      vByteCount += publicKey.decode(is, false);
      vByteCount += berTag.decode(is);
    } else {
      throw new IOException("Tag does not match mandatory sequence component.");
    }

    if (berTag.equals(RSAPrivateKeyASN1.tag)) {
      privateKey = new RSAPrivateKeyASN1();
      vByteCount += privateKey.decode(is, false);
      if (lengthVal >= 0 && vByteCount == lengthVal) {
        return tlByteCount + vByteCount;
      }
      vByteCount += berTag.decode(is);
    } else {
      throw new IOException("Tag does not match mandatory sequence component.");
    }

    if (lengthVal < 0) {
      if (!berTag.equals(0, 0, 0)) {
        throw new IOException("Decoded sequence has wrong end of contents octets");
      }
      vByteCount += BerLength.readEocByte(is);
      return tlByteCount + vByteCount;
    }

    throw new IOException(
        "Unexpected end of sequence, length tag: " + lengthVal + ", bytes decoded: " + vByteCount);

  }

  public void encodeAndSave(int encodingSizeGuess) throws IOException {
    ReverseByteArrayOutputStream reverseOS = new ReverseByteArrayOutputStream(encodingSizeGuess);
    encode(reverseOS, false);
    code = reverseOS.getArray();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    appendAsString(sb, 0);
    return sb.toString();
  }

  public void appendAsString(StringBuilder sb, int indentLevel) {

    sb.append("{");
    sb.append("\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (algorithm != null) {
      sb.append("algorithm: ");
      algorithm.appendAsString(sb, indentLevel + 1);
    } else {
      sb.append("algorithm: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (publicKey != null) {
      sb.append("publicKey: ");
      publicKey.appendAsString(sb, indentLevel + 1);
    } else {
      sb.append("publicKey: <empty-required-field>");
    }

    sb.append(",\n");
    for (int i = 0; i < indentLevel + 1; i++) {
      sb.append("\t");
    }
    if (privateKey != null) {
      sb.append("privateKey: ");
      privateKey.appendAsString(sb, indentLevel + 1);
    } else {
      sb.append("privateKey: <empty-required-field>");
    }

    sb.append("\n");
    for (int i = 0; i < indentLevel; i++) {
      sb.append("\t");
    }
    sb.append("}");
  }

}

